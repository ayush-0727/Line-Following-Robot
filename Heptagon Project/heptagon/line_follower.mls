type st = St_PID_calculation|St_Obstacle_traversing
node line_follower(sen : int^5; obj_det : int; ir1 : int; ir2 : int;
                    ir_left : int; ir_right : int)
returns (v_l : int; v_r : int; dir : int; pid : int; position : int;
          calc : int; sum : int; st : int; black_line : bool)
var sen4 : int; sen3 : int; sen2 : int; sen1 : int; sen0 : int; ir_on : int;
    object_found : int; maxspeed : int; pnr : bool; nr : bool; r : bool;
    ns : st; ck : st; v_l_St_PID_calculation : int;
    v_r_St_PID_calculation : int; dir_St_PID_calculation : int;
    pid_St_PID_calculation : int; position_St_PID_calculation : int;
    calc_St_PID_calculation : int; sum_St_PID_calculation : int;
    st_St_PID_calculation : int; black_line_St_PID_calculation : bool;
    maxspeed_St_PID_calculation : int; object_found_St_PID_calculation : int;
    ir_on_St_PID_calculation : int; sen0_St_PID_calculation : int;
    sen1_St_PID_calculation : int; sen2_St_PID_calculation : int;
    sen3_St_PID_calculation : int; sen4_St_PID_calculation : int;
    ns_St_PID_calculation : st; nr_St_PID_calculation : bool;
    v_l_St_Obstacle_traversing : int; v_r_St_Obstacle_traversing : int;
    dir_St_Obstacle_traversing : int; pid_St_Obstacle_traversing : int;
    position_St_Obstacle_traversing : int; calc_St_Obstacle_traversing : int;
    sum_St_Obstacle_traversing : int; st_St_Obstacle_traversing : int;
    black_line_St_Obstacle_traversing : bool;
    maxspeed_St_Obstacle_traversing : int;
    object_found_St_Obstacle_traversing : int;
    ir_on_St_Obstacle_traversing : int; sen0_St_Obstacle_traversing : int;
    sen1_St_Obstacle_traversing : int; sen2_St_Obstacle_traversing : int;
    sen3_St_Obstacle_traversing : int; sen4_St_Obstacle_traversing : int;
    ns_St_Obstacle_traversing : st; nr_St_Obstacle_traversing : bool;
    is_line : bool; avg_ref : int; last_pos : int; p : int; d : int; i : int;
    value : int; v_31 : bool; v_32 : int; v_33 : int; v_34 : int; v_35 : int;
    v_36 : int; v_37 : int; v_38 : int; v_39 : int; v_40 : int; v_41 : bool;
    v_42 : bool; v_43 : bool; v_44 : bool; v_45 : bool; v_46 : bool;
    v_47 : int; v_48 : bool; v_49 : int; v_50 : bool; v_51 : int;
    v_52 : bool; v_53 : bool; v_54 : int; v_55 : bool; v_56 : bool;
    v_57 : bool; v_58 : int; v_59 : bool; v_60 : int; v_61 : bool;
    v_62 : bool; v_63 : int; v_64 : bool; v_65 : bool; v_66 : bool;
    v_67 : bool; v_68 : bool; v_69 : bool; v_70 : int; v_71 : int;
    v_72 : int; v_73 : int; v_74 : int; v_75 : int; v_76 : int; v_77 : int;
    v_78 : int; v_79 : int; v_80 : int; v_81 : int; v_82 : int; v_83 : int;
    v_84 : int; v_85 : bool; v_86 : bool; v_87 : bool; v_88 : bool;
    v_89 : bool; v_90 : int; v_91 : int; v_92 : int; v_93 : int; v_94 : int;
    v_95 : int; v_96 : int; v_97 : int; v_98 : int; v_99 : int; v_100 : int;
    v_101 : int; v_102 : bool; v_103 : bool; v_104 : bool; v_105 : bool;
    v_106 : bool; v_107 : bool; v_108 : bool; v_109 : bool; v_110 : bool;
    v_111 : bool; v_112 : bool; v_113 : int; v_114 : bool; v_115 : bool;
    v_116 : int; v_117 : int; v_118 : bool; v_119 : int; v_120 : bool;
    v_121 : bool; v_122 : int; v_123 : bool; v_124 : int; v_125 : bool;
    v_126 : int; v_127 : int; v_128 : int; v_129 : int; v_130 : bool;
    v_131 : bool; v_132 : int; v_133 : int; v_134 : int; v_135 : int;
    v_136 : int; v_137 : int; v_138 : bool; v_139 : int; v_140 : bool;
    v_141 : int; v_142 : int; v_143 : bool; v_144 : int; v_145 : bool;
    v_146 : int; v_147 : int; v_148 : int; v_149 : bool; v_150 : int;
    v_151 : int; v_152 : bool; v_153 : int; v : bool; v_1 : int; v_2 : int;
    v_3 : int; v_4 : int; v_5 : int; v_6 : int; v_7 : int; v_8 : int;
    v_9 : int; v_10 : int; v_11 : int; v_12 : int; v_13 : int; v_14 : int;
    v_15 : int; v_16 : int; v_17 : int; v_18 : int; v_19 : bool; v_20 : bool;
    v_21 : bool; v_22 : bool; v_23 : bool; v_24 : int; v_25 : bool;
    v_26 : bool; v_27 : bool; v_28 : bool; v_29 : bool; v_30 : int;
let
  r = pnr;
  pnr = false fby nr;
  ck = St_PID_calculation fby ns;
  dir_St_PID_calculation = if v_149 then 2 else v_153;
  v_153 = if v_152 then 3 else 1;
  v_152 = (v_151 = 3000);
  v_151 = (v_150 + (sen4 when St_PID_calculation(ck)));
  v_150 =
    ((sen2 when St_PID_calculation(ck)) + (sen3 when St_PID_calculation(ck)));
  v_149 = (v_148 = 3000);
  v_148 = (v_147 + (sen2 when St_PID_calculation(ck)));
  v_147 =
    ((sen0 when St_PID_calculation(ck)) + (sen1 when St_PID_calculation(ck)));
  v_r_St_PID_calculation =
    if v_145 then (maxspeed when St_PID_calculation(ck)) else v_146;
  v_146 =
    ((maxspeed when St_PID_calculation(ck)) -
     (pid when St_PID_calculation(ck)));
  v_145 = ((pid when St_PID_calculation(ck)) < 0);
  v_l_St_PID_calculation =
    if v_143 then v_144 else (maxspeed when St_PID_calculation(ck));
  v_144 =
    ((maxspeed when St_PID_calculation(ck)) +
     (pid when St_PID_calculation(ck)));
  v_143 = ((pid when St_PID_calculation(ck)) < 0);
  pid_St_PID_calculation =
    if v_138 then (maxspeed when St_PID_calculation(ck)) else v_142;
  v_142 = if v_140 then v_141 else (calc when St_PID_calculation(ck));
  v_141 = ~-((maxspeed when St_PID_calculation(ck)));
  v_140 = ((calc when St_PID_calculation(ck)) < v_139);
  v_139 = ~-((maxspeed when St_PID_calculation(ck)));
  v_138 =
    ((calc when St_PID_calculation(ck)) >
     (maxspeed when St_PID_calculation(ck)));
  calc_St_PID_calculation = (v_136 + v_137);
  v_137 = (d * 5);
  v_136 = (v_134 + v_135);
  v_135 = (i / 25000);
  v_134 = (p / 25);
  d = (p - v_133);
  v_133 = if v_131 then 0 else v_132;
  v_132 = pre p;
  v_131 = if v_130 then true else (r when St_PID_calculation(ck));
  v_130 = true fby false;
  i = if v_121 then 0 else v_129;
  v_129 = if v_123 then 200000 else v_128;
  v_128 = if v_125 then ~-(200000) else v_127;
  v_127 = (v_126 + p);
  v_126 = pre i;
  v_125 = (v_124 < ~-(200000));
  v_124 = pre i;
  v_123 = (v_122 > 200000);
  v_122 = pre i;
  v_121 = if v_120 then true else (r when St_PID_calculation(ck));
  v_120 = true fby false;
  p = ((position when St_PID_calculation(ck)) - 2000);
  position_St_PID_calculation = if is_line then v_117 else v_119;
  v_119 = if v_118 then 0 else 4000;
  v_118 = (last_pos < 0);
  v_117 = if v_115 then v_116 else 0;
  v_116 = (value / (sum when St_PID_calculation(ck)));
  v_115 = not(v_114);
  v_114 = ((sum when St_PID_calculation(ck)) = 0);
  last_pos = if v_112 then 0 else v_113;
  v_113 = pre (position when St_PID_calculation(ck));
  v_112 = if v_111 then true else (r when St_PID_calculation(ck));
  v_111 = true fby false;
  is_line = if v_110 then true else false;
  v_110 = (v_108 or v_109);
  v_109 = ((sen4 when St_PID_calculation(ck)) > 400);
  v_108 = (v_106 or v_107);
  v_107 = ((sen3 when St_PID_calculation(ck)) > 400);
  v_106 = (v_104 or v_105);
  v_105 = ((sen2 when St_PID_calculation(ck)) > 400);
  v_104 = (v_102 or v_103);
  v_103 = ((sen1 when St_PID_calculation(ck)) > 400);
  v_102 = ((sen0 when St_PID_calculation(ck)) > 400);
  sum_St_PID_calculation = (v_101 + (sen4 when St_PID_calculation(ck)));
  v_101 = (v_100 + (sen3 when St_PID_calculation(ck)));
  v_100 = (v_99 + (sen2 when St_PID_calculation(ck)));
  v_99 =
    ((sen0 when St_PID_calculation(ck)) + (sen1 when St_PID_calculation(ck)));
  value = (v_97 + v_98);
  v_98 = (4000 * (sen4 when St_PID_calculation(ck)));
  v_97 = (v_95 + v_96);
  v_96 = (3000 * (sen3 when St_PID_calculation(ck)));
  v_95 = (v_93 + v_94);
  v_94 = (2000 * (sen2 when St_PID_calculation(ck)));
  v_93 = (v_91 + v_92);
  v_92 = (1000 * (sen1 when St_PID_calculation(ck)));
  v_91 = (0 * (sen0 when St_PID_calculation(ck)));
  object_found_St_PID_calculation = if v_86 then 0 else v_90;
  v_90 = if v_89 then 1 else 0;
  v_89 = (v_87 or v_88);
  v_88 = ((ir_right when St_PID_calculation(ck)) = 1);
  v_87 = ((ir_left when St_PID_calculation(ck)) = 1);
  v_86 = if v_85 then true else (r when St_PID_calculation(ck));
  v_85 = true fby false;
  ir_on_St_PID_calculation = (ir1 when St_PID_calculation(ck));
  sen4_St_PID_calculation =
    if (black_line when St_PID_calculation(ck)) then v_83 else v_84;
  v_84 = (sen when St_PID_calculation(ck))[4];
  v_83 = (1000 - v_82);
  v_82 = (sen when St_PID_calculation(ck))[4];
  sen3_St_PID_calculation =
    if (black_line when St_PID_calculation(ck)) then v_80 else v_81;
  v_81 = (sen when St_PID_calculation(ck))[3];
  v_80 = (1000 - v_79);
  v_79 = (sen when St_PID_calculation(ck))[3];
  sen2_St_PID_calculation =
    if (black_line when St_PID_calculation(ck)) then v_77 else v_78;
  v_78 = (sen when St_PID_calculation(ck))[2];
  v_77 = (1000 - v_76);
  v_76 = (sen when St_PID_calculation(ck))[2];
  sen1_St_PID_calculation =
    if (black_line when St_PID_calculation(ck)) then v_74 else v_75;
  v_75 = (sen when St_PID_calculation(ck))[1];
  v_74 = (1000 - v_73);
  v_73 = (sen when St_PID_calculation(ck))[1];
  sen0_St_PID_calculation =
    if (black_line when St_PID_calculation(ck)) then v_71 else v_72;
  v_72 = (sen when St_PID_calculation(ck))[0];
  v_71 = (1000 - v_70);
  v_70 = (sen when St_PID_calculation(ck))[0];
  black_line_St_PID_calculation = if v_42 then false else v_69;
  v_69 = if v_67 then true else v_68;
  v_68 = pre (black_line when St_PID_calculation(ck));
  v_67 = (v_46 & v_66);
  v_66 = (v_57 or v_65);
  v_65 = (v_62 & v_64);
  v_64 = (v_63 = 1000);
  v_63 = (sen when St_PID_calculation(ck))[4];
  v_62 = (v_59 & v_61);
  v_61 = (v_60 = 0);
  v_60 = (sen when St_PID_calculation(ck))[3];
  v_59 = (v_58 = 1000);
  v_58 = (sen when St_PID_calculation(ck))[2];
  v_57 = (v_48 or v_56);
  v_56 = (v_53 & v_55);
  v_55 = (v_54 = 1000);
  v_54 = (sen when St_PID_calculation(ck))[2];
  v_53 = (v_50 & v_52);
  v_52 = (v_51 = 0);
  v_51 = (sen when St_PID_calculation(ck))[1];
  v_50 = (v_49 = 1000);
  v_49 = (sen when St_PID_calculation(ck))[0];
  v_48 = (v_47 = 0);
  v_47 = (sen when St_PID_calculation(ck))[2];
  v_46 = (v_44 & v_45);
  v_45 = (avg_ref >= 700);
  v_44 = not(v_43);
  v_43 = pre (black_line when St_PID_calculation(ck));
  v_42 = if v_41 then true else (r when St_PID_calculation(ck));
  v_41 = true fby false;
  avg_ref = (v_40 / 5);
  v_40 = (v_38 + v_39);
  v_39 = (sen when St_PID_calculation(ck))[4];
  v_38 = (v_36 + v_37);
  v_37 = (sen when St_PID_calculation(ck))[3];
  v_36 = (v_34 + v_35);
  v_35 = (sen when St_PID_calculation(ck))[2];
  v_34 = (v_32 + v_33);
  v_33 = (sen when St_PID_calculation(ck))[1];
  v_32 = (sen when St_PID_calculation(ck))[0];
  maxspeed_St_PID_calculation = 60;
  st_St_PID_calculation = 1;
  nr_St_PID_calculation = if v_31 then true else false;
  ns_St_PID_calculation =
    if v_31 then St_Obstacle_traversing else St_PID_calculation;
  v_31 = ((object_found when St_PID_calculation(ck)) = 1);
  dir_St_Obstacle_traversing = 1;
  v_r_St_Obstacle_traversing = if v_26 then 0 else v_30;
  v_30 = if v_29 then 0 else (maxspeed when St_Obstacle_traversing(ck));
  v_29 = (v_27 or v_28);
  v_28 = ((ir_left when St_Obstacle_traversing(ck)) = 1);
  v_27 = ((ir1 when St_Obstacle_traversing(ck)) = 0);
  v_26 = if v_25 then true else (r when St_Obstacle_traversing(ck));
  v_25 = true fby false;
  v_l_St_Obstacle_traversing =
    if v_20 then (maxspeed when St_Obstacle_traversing(ck)) else v_24;
  v_24 = if v_23 then (maxspeed when St_Obstacle_traversing(ck)) else 0;
  v_23 = (v_21 or v_22);
  v_22 = ((ir_left when St_Obstacle_traversing(ck)) = 1);
  v_21 = ((ir1 when St_Obstacle_traversing(ck)) = 0);
  v_20 = if v_19 then true else (r when St_Obstacle_traversing(ck));
  v_19 = true fby false;
  ir_on_St_Obstacle_traversing = 0;
  object_found_St_Obstacle_traversing = 0;
  black_line_St_Obstacle_traversing = true;
  calc_St_Obstacle_traversing = 0;
  position_St_Obstacle_traversing = 0;
  pid_St_Obstacle_traversing = 0;
  sum_St_Obstacle_traversing =
    (v_18 + (sen4 when St_Obstacle_traversing(ck)));
  v_18 = (v_17 + (sen3 when St_Obstacle_traversing(ck)));
  v_17 = (v_16 + (sen2 when St_Obstacle_traversing(ck)));
  v_16 =
    ((sen0 when St_Obstacle_traversing(ck)) +
     (sen1 when St_Obstacle_traversing(ck)));
  sen4_St_Obstacle_traversing =
    if (black_line when St_Obstacle_traversing(ck)) then v_14 else v_15;
  v_15 = (sen when St_Obstacle_traversing(ck))[4];
  v_14 = (1000 - v_13);
  v_13 = (sen when St_Obstacle_traversing(ck))[4];
  sen3_St_Obstacle_traversing =
    if (black_line when St_Obstacle_traversing(ck)) then v_11 else v_12;
  v_12 = (sen when St_Obstacle_traversing(ck))[3];
  v_11 = (1000 - v_10);
  v_10 = (sen when St_Obstacle_traversing(ck))[3];
  sen2_St_Obstacle_traversing =
    if (black_line when St_Obstacle_traversing(ck)) then v_8 else v_9;
  v_9 = (sen when St_Obstacle_traversing(ck))[2];
  v_8 = (1000 - v_7);
  v_7 = (sen when St_Obstacle_traversing(ck))[2];
  sen1_St_Obstacle_traversing =
    if (black_line when St_Obstacle_traversing(ck)) then v_5 else v_6;
  v_6 = (sen when St_Obstacle_traversing(ck))[1];
  v_5 = (1000 - v_4);
  v_4 = (sen when St_Obstacle_traversing(ck))[1];
  sen0_St_Obstacle_traversing =
    if (black_line when St_Obstacle_traversing(ck)) then v_2 else v_3;
  v_3 = (sen when St_Obstacle_traversing(ck))[0];
  v_2 = (1000 - v_1);
  v_1 = (sen when St_Obstacle_traversing(ck))[0];
  maxspeed_St_Obstacle_traversing = 60;
  st_St_Obstacle_traversing = 2;
  nr_St_Obstacle_traversing = if v then false else false;
  ns_St_Obstacle_traversing =
    if v then St_PID_calculation else St_Obstacle_traversing;
  v = ((sum when St_Obstacle_traversing(ck)) > 1000);
  v_l =
    merge ck
      (St_Obstacle_traversing -> v_l_St_Obstacle_traversing)
      (St_PID_calculation -> v_l_St_PID_calculation);
  v_r =
    merge ck
      (St_Obstacle_traversing -> v_r_St_Obstacle_traversing)
      (St_PID_calculation -> v_r_St_PID_calculation);
  dir =
    merge ck
      (St_Obstacle_traversing -> dir_St_Obstacle_traversing)
      (St_PID_calculation -> dir_St_PID_calculation);
  pid =
    merge ck
      (St_Obstacle_traversing -> pid_St_Obstacle_traversing)
      (St_PID_calculation -> pid_St_PID_calculation);
  position =
    merge ck
      (St_Obstacle_traversing -> position_St_Obstacle_traversing)
      (St_PID_calculation -> position_St_PID_calculation);
  calc =
    merge ck
      (St_Obstacle_traversing -> calc_St_Obstacle_traversing)
      (St_PID_calculation -> calc_St_PID_calculation);
  sum =
    merge ck
      (St_Obstacle_traversing -> sum_St_Obstacle_traversing)
      (St_PID_calculation -> sum_St_PID_calculation);
  st =
    merge ck
      (St_Obstacle_traversing -> st_St_Obstacle_traversing)
      (St_PID_calculation -> st_St_PID_calculation);
  black_line =
    merge ck
      (St_Obstacle_traversing -> black_line_St_Obstacle_traversing)
      (St_PID_calculation -> black_line_St_PID_calculation);
  maxspeed =
    merge ck
      (St_Obstacle_traversing -> maxspeed_St_Obstacle_traversing)
      (St_PID_calculation -> maxspeed_St_PID_calculation);
  object_found =
    merge ck
      (St_Obstacle_traversing -> object_found_St_Obstacle_traversing)
      (St_PID_calculation -> object_found_St_PID_calculation);
  ir_on =
    merge ck
      (St_Obstacle_traversing -> ir_on_St_Obstacle_traversing)
      (St_PID_calculation -> ir_on_St_PID_calculation);
  sen0 =
    merge ck
      (St_Obstacle_traversing -> sen0_St_Obstacle_traversing)
      (St_PID_calculation -> sen0_St_PID_calculation);
  sen1 =
    merge ck
      (St_Obstacle_traversing -> sen1_St_Obstacle_traversing)
      (St_PID_calculation -> sen1_St_PID_calculation);
  sen2 =
    merge ck
      (St_Obstacle_traversing -> sen2_St_Obstacle_traversing)
      (St_PID_calculation -> sen2_St_PID_calculation);
  sen3 =
    merge ck
      (St_Obstacle_traversing -> sen3_St_Obstacle_traversing)
      (St_PID_calculation -> sen3_St_PID_calculation);
  sen4 =
    merge ck
      (St_Obstacle_traversing -> sen4_St_Obstacle_traversing)
      (St_PID_calculation -> sen4_St_PID_calculation);
  ns =
    merge ck
      (St_Obstacle_traversing -> ns_St_Obstacle_traversing)
      (St_PID_calculation -> ns_St_PID_calculation);
  nr =
    merge ck
      (St_Obstacle_traversing -> nr_St_Obstacle_traversing)
      (St_PID_calculation -> nr_St_PID_calculation)
tel

node main(sen0 : int; sen1 : int; sen2 : int; sen3 : int; sen4 : int;
           obj_det : int; ir1 : int; ir2 : int; ir_left : int;
           ir_right : int)
returns (v_l : int; v_r : int; dir : int; pid : int; position : int;
          calc : int; sum : int; st : int; black_line : bool)
var sen : int^5;
let
  (v_l, v_r, dir, pid, position, calc, sum, st, black_line) =
    line_follower(sen, obj_det, ir1, ir2, ir_left, ir_right);
  sen = [sen0; sen1; sen2; sen3; sen4]
tel

